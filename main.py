import math
from statistics import mode
from statistics import median
import numpy as np
import scipy.stats as st
import random


# –ü–µ—Ä–≤—ã–π –Ω–æ–º–µ—Ä üåà
print("====================–ü–µ—Ä–≤—ã–π –Ω–æ–º–µ—Ä====================\n")
first_number = [23, 25, 42, 34, 27, 19, 21, 34, 41]
sr = 0
for i in range (len(first_number)):
    sr += first_number[i]
sr = sr/len(first_number)+1
sr = 30.66667
print(sr)
alpha1=0.95
loc1 = np.mean(sr)
scale1 = st.sem(first_number)
interval_first = st.norm.interval(alpha1, loc1, scale1)
print("95% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å—Ä–µ–¥–Ω–µ–π –¥–Ω–µ–≤–Ω–æ–π –≤—ã—Ä—É—á–∫–∏:", interval_first)

# –î–ª—è –¥–∏—Å–ø–µ—Ä—Å–∏–∏ üå¥
disperser = np.var(first_number)
mean1 = np.mean(disperser)
loc1=mean1
scale1 = st.sem(first_number)
interval_first2 = st.norm.interval(alpha1, loc1, scale1)
print("95% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –¥–∏—Å–ø–µ—Ä—Å–∏–∏ –≤—ã—Ä—É—á–∫–∏:", interval_first2)

# –î–ª—è –°–ö–û üê†
SVO = np.std(first_number)
mean1 = np.mean(SVO)

loc1=mean1
scale1 = st.sem(first_number)
interval_first3 = st.norm.interval(alpha1, loc1, scale1)
print("95% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –°–ö–û:", interval_first3)


# –í—Ç–æ—Ä–æ–π –Ω–æ–º–µ—Ä üåà
print("\n====================–í—Ç–æ—Ä–æ–π –Ω–æ–º–µ—Ä====================\n")
arr_time = [19, 21, 23, 25, 27, 29]
arr_worker = [2, 8, 24, 50, 12, 4]
arr = []

sum_workers = 0

# –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä—É–¥–∞ —Ä–∞–±–æ—á–∏—Ö üåµ
for j in range(len(arr_worker)):
    sum_workers += arr_worker[j]
sred_proizv = 0
for i in range(len(arr_worker)):
    sred_proizv += arr_time[i] * arr_worker[i]
print('–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä—É–¥–∞ —Ä–∞–±–æ—á–∏—Ö: ', sred_proizv / sum_workers)

#for n in range(len(arr_worker) ):
#    for m in range(arr_worker[n]):
#        arr.append(arr_time[n])
arr = [-4633, -1619, -3274, -1029, -1147, 775, -171, -1990,-2795, 25991, -2220,-921,-1862,-600,-1785,-2158,-1422,13873,1068,-3387,-454,97,-551,-2019,2267,19643,-3096,-152,-1697,1700]
# –ú–æ–¥–∞ üçí
moda = mode(arr)
print("–ú–æ–¥–∞: ", moda)

# –ú–µ–¥–∏–∞–Ω–∞ üçÄ
mediana = median(arr)
print("–ú–µ–¥–∏–∞–Ω–∞: ", mediana)

# –†–∞–∑–º–∞—Ö –≤–∞—Ä–∏–∞—Ü–∏–∏ üå≥
raZmah1 = 0
raZmah1 = max(arr_time) - min(arr_time)
print("–†–∞–∑–º–∞—Ö –≤–∞—Ä–∏–∞—Ü–∏–∏: ", raZmah1)

# –î–∏—Å–ø–µ—Ä—Å–∏—è üå≤
dispersia = np.var(arr)
print("–î–∏—Å–ø–µ—Ä—Å–∏—è: ", dispersia)

# –°—Ä–µ–¥–Ω–µ–µ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ üéÑ
mid_square = np.std(arr)
print("–°—Ä–µ–¥–Ω–µ–µ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ", mid_square)

# –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ üçÑ
cv = lambda x: np.std(x, ddof=1) / np.mean(x) * 100
print("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏: ", cv(arr))



# –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª üå±

# –î–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–π –¥–µ—Ç–∞–ª–∏ üåø
mean = np.mean((19+21+23+25+27+29)/6)
std_err = st.sem(arr)
loc=mean
alpha=0.99
scale=std_err
interval = st.norm.interval(alpha, loc, scale)
print("99% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–π –¥–µ—Ç–∞–ª–∏:", interval)

# –î–ª—è –¥–∏—Å–ø–µ—Ä—Å–∏–∏ ‚òòÔ∏è
mean = np.mean(dispersia)
std_err = st.sem(arr)
loc=mean
alpha=0.99
scale=std_err
interval = st.norm.interval(alpha, loc, scale)
print("99% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –¥–∏—Å–ø–µ—Ä—Å–∏–∏:", interval)

# –î–ª—è –°–ö–û üéç
mean = np.mean(mid_square)
std_err = st.sem(arr)
loc=mean
alpha=0.99
scale=std_err
interval = st.norm.interval(alpha, loc, scale)
print("99% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –°–ö–û:", interval)


# –¢—Ä–µ—Ç–∏–π –Ω–æ–º–µ—Ä üåà
print("\n====================–¢—Ä–µ—Ç–∏–π –Ω–æ–º–µ—Ä====================\n")
third_arr = [1.6, 1.9, 2.0, 2.1, 2.2, 2.4, 2.5, 2.6, 2.7, 2.8, 2.8, 2.9, 2.9, 3.0, 3.1, 3.2, 3.2, 3.3, 3.4, 3.4, 3.4, 3.5, 3.5, 3.5, 3.5, 3.6, 3.7, 3.9]
sr = 0
for o in range (len(third_arr)):
    sr += third_arr[o]
sr = sr/len(third_arr)

# –î–ª—è —Å—Ä–µ–¥–Ω–µ–π —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ üçÅ
mean = np.mean(sr)
std_err = st.sem(third_arr)
loc=mean
alpha=0.93
scale=std_err
interval = st.norm.interval(alpha, loc, scale)
print("93% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å—Ä–µ–¥–Ω–µ–π —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏:", interval)

# –î–ª—è —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è ‚ö°Ô∏è
mid_square3 = np.std(third_arr)
mean = np.mean(mid_square3)
std_err = st.sem(third_arr)
loc=mean
alpha=0.93
scale=std_err
interval = st.norm.interval(alpha, loc, scale)
print("93% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:", interval)


# –ß–µ—Ç–≤—ë—Ä—Ç—ã–π –Ω–æ–º–µ—Ä üåà
print("\n====================–ß–µ—Ç–≤—ë—Ä—Ç—ã–π –Ω–æ–º–µ—Ä====================\n")
array_time = [round(random.uniform(4.0, 4.5), 1), round(random.uniform(4.5, 5.0), 1), round(random.uniform(5.0, 5.5), 1), round(random.uniform(5.5, 6.0), 1), round(random.uniform(6.0, 6.5), 1), round(random.uniform(6.5, 7.0), 1), round(random.uniform(7.0, 7.5), 1), round(random.uniform(7.5, 8.0), 1), round(random.uniform(8.0, 9.5), 1)]
array_worker = [4, 14, 55, 92, 160, 96, 66, 11, 2]
array = []
for nn in range(len(array_worker) - 1):
    for MMM in range(array_worker[nn]):
        array.append(array_time[nn])

# –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞–±–æ—á–∏–π —Ç—Ä–∞—Ç–∏—Ç –Ω–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ üê≥
sred_znach = 0
for nnn in range (len(array)):
    sred_znach += array[nnn]
sred_znach = sred_znach / len(array)

# –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è c—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞–±–æ—á–∏–π —Ç—Ä–∞—Ç–∏—Ç –Ω–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ üéã
mean = np.mean(sred_znach)
std_err = st.sem(array)
loc=mean
alpha=0.999
scale=std_err
interval4 = st.norm.interval(alpha, loc, scale)
print("99.9% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è c—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞–±–æ—á–∏–π —Ç—Ä–∞—Ç–∏—Ç –Ω–∞ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏:", interval4)


# –ü—è—Ç—ã–π –Ω–æ–º–µ—Ä üåà
print("\n====================–ü—è—Ç—ã–π –Ω–æ–º–µ—Ä====================\n")

count_items = np.array([8, 42, 51, 37, 12])
average_meaning = np.array([12, 14, 16, 18, 20])


# –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–¥–µ–ª–∏–π üçâ
n = np.sum(count_items)
# –î–∏—Å–ø–µ—Ä—Å–∏—è n/n-1
# –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ ü•ë
average_procent = np.sum(count_items * average_meaning) / n

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ üçÖ
standart_otklonenie = np.sqrt(np.sum(count_items * (average_meaning - average_procent) ** 2) / n)

print("–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–∂–Ω–æ—Å—Ç–∏:", average_procent)
print("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:", standart_otklonenie)

# –∞) –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –∑–∞–∫–ª—é—á–µ–Ω –≤ –≥—Ä–∞–Ω–∏—Ü–∞—Ö –æ—Ç 12.5 –¥–æ 17.5 üçé
down_border = 12.5
top_border = 17.5
probability = (top_border - average_procent) / standart_otklonenie - (down_border - average_procent) / standart_otklonenie
print("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:", probability)

# –±) –ì—Ä–∞–Ω–∏—Ü—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 0.95 –±—É–¥–µ—Ç –∑–∞–∫–ª—é—á–µ–Ω —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –∏–∑–¥–µ–ª–∏–π –≤–æ –≤—Å–µ–π –ø–∞—Ä—Ç–∏–∏ üçç
border_95 = np.percentile(count_items, [2.5, 97.5], interpolation='nearest')
print("–ì—Ä–∞–Ω–∏—Ü—ã:", average_procent + border_95 * standart_otklonenie)



# –í—Ç–æ—Ä–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ üåà
print("\n====================–í—Ç–æ—Ä–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞====================\n")
# –ü–µ—Ä–≤—ã–π –Ω–æ–º–µ—Ä üçÖ
print("\n–ü–µ—Ä–≤—ã–π –Ω–æ–º–µ—Ä:")
empire_arr = [14, 18, 32, 70, 36, 20, 10]
teory_arr = [10, 24, 34, 80, 22, 18, 12]
IhateCarrots = [0] * 7
empire_sum = 0
teory_sum = 0
nabludaemoe = 0
s = 7 # –ó–∞–ø–æ–º–Ω–∏–º, –≤ –±—É–¥—É—â–µ–º –Ω–∞–º —ç—Ç–æ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è
for i in range(len(empire_arr)):
    empire_sum += empire_arr[i]
for i in range(len(empire_arr)):
    teory_sum += empire_arr[i]
for i in range(len(empire_arr)):
    IhateCarrots[i] = ((empire_arr[i] - teory_arr[i])**2)/teory_arr[i]
    nabludaemoe += IhateCarrots[i]
if (teory_sum != empire_sum):
    print("–°—É–º–º–∞ —á–∞—Å—Ç–æ—Ç —Ä–∞–∑–ª–∏—á–∞–µ—Ç—Å—è –∏ –¥–∞–ª—å—à–µ –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ")
else:
    print("–°—É–º–º–∞ —á–∞—Å—Ç–æ—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
    Hi = 9.48773
    if (Hi < nabludaemoe):
        print("–•–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—å—à–µ –Ω–∞–±–ª—é–¥–∞–µ–º–æ–≥–æ, —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, H0 –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç—Å—è –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è H1")
    elif (Hi > nabludaemoe):
        print("–•–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –±–æ–ª—å—à–µ –Ω–∞–±–ª—é–¥–∞–µ–º–æ–≥–æ, —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, H1 –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç—Å—è –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è H0")

# –í—Ç–æ—Ä–æ–π –Ω–æ–º–µ—Ä üçÖ
print("\n\n–í—Ç–æ—Ä–æ–π –Ω–æ–º–µ—Ä:")
# –î–∞–Ω–Ω—ã–µ
X = np.array([7.8, 8.2, 9.1, 8.9, 8.6])
Y = np.array([6.6, 7.1, 6.3, 7, 6.2, 5.8])

# t-–∫—Ä–∏—Ç–µ—Ä–∏–π –°—Ç—å—é–¥–µ–Ω—Ç–∞ –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –≤—ã–±–æ—Ä–æ–∫ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–µ–≥–æ p-–∑–Ω–∞—á–µ–Ω–∏—è
t_statistic, p_value = st.ttest_ind(X, Y)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
alpha = 0.05

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
if p_value < alpha:
    print("–û—Ç–≤–µ—Ä–≥–∞–µ–º –Ω—É–ª–µ–≤—É—é –≥–∏–ø–æ—Ç–µ–∑—É. –°—Ç–∞–Ω–∫–∏ –Ω–µ –æ–±–ª–∞–¥–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é.")
else:
    print("–ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω—É–ª–µ–≤—É—é –≥–∏–ø–æ—Ç–µ–∑—É. –°—Ç–∞–Ω–∫–∏ –æ–±–ª–∞–¥–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é.")

print("t-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", t_statistic)
print("p-–∑–Ω–∞—á–µ–Ω–∏–µ:", p_value)


# –¢—Ä–µ—Ç–∏–π –Ω–æ–º–µ—Ä üçÖ
print("\n\n–¢—Ä–µ—Ç–∏–π –Ω–æ–º–µ—Ä:")
# –î–∞–Ω–Ω—ã–µ
x_mean = 4.85
y_mean = 5.07
Sx = 0.94
Sy = 1.02
n_x = 15
n_y = 12

# –†–∞—Å—á–µ—Ç t-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ p-–∑–Ω–∞—á–µ–Ω–∏—è
t_statistic, p_value = st.ttest_ind_from_stats(x_mean, Sx, n_x, y_mean, Sy, n_y)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
alpha = 0.01

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
if p_value < alpha:
    print("–û—Ç–≤–µ—Ä–≥–∞–µ–º –Ω—É–ª–µ–≤—É—é –≥–∏–ø–æ—Ç–µ–∑—É. –°—É—â–µ—Å—Ç–≤—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞–∑–ª–∏—á–∏–µ —Å—Ä–µ–¥–Ω–µ–π —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –µ–¥–∏–Ω–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –Ω–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è—Ö.")
else:
    print("–ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω—É–ª–µ–≤—É—é –≥–∏–ø–æ—Ç–µ–∑—É. –†–∞–∑–ª–∏—á–∏–µ —Å—Ä–µ–¥–Ω–µ–π —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –µ–¥–∏–Ω–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –Ω–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è—Ö –Ω–µ—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ.")

print("t-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", t_statistic)
print("p-–∑–Ω–∞—á–µ–Ω–∏–µ:", p_value)




# –ß–µ—Ç–≤—ë—Ä—Ç—ã–π –Ω–æ–º–µ—Ä üçÖ
print("\n\n–ß–µ—Ç–≤—ë—Ä—Ç—ã–π –Ω–æ–º–µ—Ä:")
# –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø—ã
x_values = [34, 35, 37, 39]
n_x = [2, 3, 4, 1]

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ç–æ—Ä–æ–π –≥—Ä—É–ø–ø—ã
y_values = [32, 34, 36]
n_y = [2, 2, 8]

# –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
mean_x = sum([x * n for x, n in zip(x_values, n_x)]) / sum(n_x)
mean_y = sum([y * n for y, n in zip(y_values, n_y)]) / sum(n_y)

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∏ —Å—Ä–µ–¥–Ω–µ–µ –¥–ª—è –∫–∞–∂–¥–æ–π –≤—ã–±–æ—Ä–∫–∏
S_x = (sum([n * ((x - mean_x) ** 2) for x, n in zip(x_values, n_x)]) / (sum(n_x) - 1)) ** 0.5
S_y = (sum([n * ((y - mean_y) ** 2) for y, n in zip(y_values, n_y)]) / (sum(n_y) - 1)) ** 0.5

# –†–∞—Å—á–µ—Ç t-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ p-–∑–Ω–∞—á–µ–Ω–∏—è
t_statistic, p_value = st.ttest_ind_from_stats(mean_x, S_x, sum(n_x), mean_y, S_y, sum(n_y))

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
alpha = 0.05

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
if p_value < alpha:
    print("–û—Ç–≤–µ—Ä–≥–∞–µ–º –Ω—É–ª–µ–≤—É—é –≥–∏–ø–æ—Ç–µ–∑—É. –°—É—â–µ—Å—Ç–≤—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞–∑–ª–∏—á–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–µ–±–∏—Ç–æ—Ä—Å–∫–æ–π –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
else:
    print("–ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω—É–ª–µ–≤—É—é –≥–∏–ø–æ—Ç–µ–∑—É. –†–∞–∑–ª–∏—á–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–µ–±–∏—Ç–æ—Ä—Å–∫–æ–π –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö –Ω–µ—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ.")

print("t-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", t_statistic)
print("p-–∑–Ω–∞—á–µ–Ω–∏–µ:", p_value)



# –ü—è—Ç—ã–π –Ω–æ–º–µ—Ä üçÖ
print("\n\n–ü—è—Ç—ã–π –Ω–æ–º–µ—Ä:")
# –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø—ã
x_values = [139, 137, 134, 134, 137, 137, 135, 137, 135, 135]
mean_x = sum(x_values) / len(x_values)

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ç–æ—Ä–æ–π –≥—Ä—É–ø–ø—ã
y_values = [136, 136, 132, 134, 136, 136, 134, 132, 136, 136, 136, 136]
mean_y = sum(y_values) / len(y_values)

# –†–∞—Å—á–µ—Ç t-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ p-–∑–Ω–∞—á–µ–Ω–∏—è
t_statistic, p_value = st.ttest_ind(x_values, y_values)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
alpha = 0.05

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
if p_value < alpha:
    print("–û—Ç–≤–µ—Ä–≥–∞–µ–º –Ω—É–ª–µ–≤—É—é –≥–∏–ø–æ—Ç–µ–∑—É. –°—É—â–µ—Å—Ç–≤—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞–∑–ª–∏—á–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ä–µ–¥–Ω–µ–π –≤—ã—Ä—É—á–∫–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
else:
    print("–ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω—É–ª–µ–≤—É—é –≥–∏–ø–æ—Ç–µ–∑—É. –†–∞–∑–ª–∏—á–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ä–µ–¥–Ω–µ–π –≤—ã—Ä—É—á–∫–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö –Ω–µ—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ.")

print("t-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", t_statistic)
print("p-–∑–Ω–∞—á–µ–Ω–∏–µ:", p_value)